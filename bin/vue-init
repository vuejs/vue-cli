#!/usr/bin/env node

var Khaos = require('khaos-patched')
var metadata = require('read-metadata')
var download = require('download-git-repo')
var program = require('commander')
var exists = require('fs').existsSync
var path = require('path')
var rm = require('rimraf').sync
var uid = require('uid')
var chalk = require('chalk')
var inquirer = require('inquirer')
var logger = require('../lib/logger')
var getGitUser = require('../lib/git-user')
var Spinner = require('../lib/spinner')

/**
 * Usage.
 */

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')

/**
 * Help.
 */

program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project with an official template'))
  console.log('    $ vue init webpack my-project')
  console.log()
  console.log(chalk.gray('    # create a new project straight from a github template'))
  console.log('    $ vue init username/repo my-project')
  console.log()
})

/**
 * Help.
 */

program.parse(process.argv)
if (program.args.length < 1) return program.help()

/**
 * Padding.
 */

console.log()
process.on('exit', function () {
  console.log()
})

/**
 * Settings.
 */

var template = program.args[0]
var hasSlash = template.indexOf('/') > -1
var rawName = program.args[1]
var inPlace = !rawName || rawName === '.'
var name = inPlace ? path.relative('../', process.cwd()) : rawName
var dir = program.directory
var to = path.resolve(rawName || '.')
var clone = program.clone || false

if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Generate project in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }], function (answers) {
    if (answers.ok) {
      run()
    }
  })
} else {
  run()
}

/**
 * Check, download and generate the project.
 */

function run () {
  // check if template is local
  if (hasSlash && exists(template)) {
    generate(template, to, function (err) {
      if (err) logger.fatal(err)
      console.log()
      logger.success('Generated "%s".', name)
    })
  } else {
    // use official templates
    if (!hasSlash) {
      template = 'vuejs-templates/' + template
    }
    // download and generate
    var tmp = '/tmp/vue-template-' + uid()
    var spinner = new Spinner('downloading template')
    spinner.start()
    download(template, tmp, { clone: clone }, function (err) {
      spinner.stop()
      if (err) logger.fatal(err)
      generate(tmp, to, function (err) {
        if (err) logger.fatal(err)
        rm(tmp)
        console.log()
        logger.success('Generated "%s".', name)
      })
    })
  }
}

/**
 * Generate a template given a `src` and `dest`.
 *
 * @param {String} src
 * @param {String} dest
 * @param {Function} fn
 */

function generate (src, dest, fn) {
  var template = path.join(src, 'template')
  var khaos = new Khaos(template)
  var opts = options(src)

  khaos.schema(opts.schema)
  khaos.generate(dest, fn)
}

/**
 * Read prompts metadata.
 *
 * @param {String} dir
 * @return {Object}
 */

function options (dir) {
  var file = path.join(dir, 'meta.json')
  var opts = exists(file)
    ? metadata.sync(file)
    : {}

  setDefault(opts, 'name', name)

  var author = getGitUser()
  if (author) {
    setDefault(opts, 'author', author)
  }

  return opts
}

/**
 * Set the default value for a schema key
 *
 * @param {Object} opts
 * @param {String} key
 * @param {String} val
 */

function setDefault (opts, key, val) {
  var schema = opts.schema || (opts.schema = {})
  if (!schema[key] || typeof schema[key] !== 'object') {
    schema[key] = {
      'type': 'string',
      'default': val
    }
  } else {
    schema[key]['default'] = val
  }
}
