#!/usr/bin/env node

var Khaos = require('khaos-patched')
var metadata = require('read-metadata')
var download = require('download-git-repo')
var program = require('commander')
var exists = require('fs').existsSync
var join = require('path').join
var resolve = require('path').resolve
var rm = require('rimraf').sync
var uid = require('uid')
var chalk = require('chalk')
var logger = require('../lib/logger')
var getGitUser = require('../lib/git-user')
var unyield = require('unyield')

/**
 * Usage.
 */

program
  .usage('<template-name> <project-name>')
  .option('-c, --clone', 'use git clone')

/**
 * Help.
 */

program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project with an official template'))
  console.log('    $ vue init webpack my-project')
  console.log()
  console.log(chalk.gray('    # create a new project straight from a github template'))
  console.log('    $ vue init username/repo my-project')
  console.log()
})

/**
 * Help.
 */

program.parse(process.argv)
if (program.args.length < 2) return program.help()

/**
 * Padding.
 */

console.log()
process.on('exit', function () {
  console.log()
})

/**
 * Settings.
 */

var template = program.args[0]
var hasSlash = template.indexOf('/') > -1
var name = program.args[1]
var dir = program.directory
var to = resolve(name)
var clone = program.clone || false
if (exists(to)) logger.fatal('"%s" already exists.', name)

/**
 * Detect if template on file system.
 */

if (hasSlash && exists(template)) {
  generate(template, to, function (err) {
    if (err) logger.fatal(err)
    console.log()
    logger.success('Generated "%s".', name)
  })
} else {
  /**
   * Detect official template.
   */

  if (!hasSlash) {
    template = 'vuejs-templates/' + template
  }

  /**
   * Download and generate.
   */

  var tmp = '/tmp/vue-template-' + uid()
  download(template, tmp, { clone: clone }, function (err) {
    if (err) logger.fatal(err)
    generate(tmp, to, function (err) {
      if (err) logger.fatal(err)
      rm(tmp)
      console.log()
      logger.success('Generated "%s".', name)
    })
  })
}

/**
 * Generate a template given a `src` and `dest`.
 *
 * @param {String} src
 * @param {String} dest
 * @param {Function} fn
 */

function generate (src, dest, fn) {
  (unyield(function * (src, dest) {
    var template = join(src, 'template')
    var opts = options(src)
    var khaos = new Khaos(template)

    var files = yield khaos.read()
    var schema = yield khaos.parse(files)

    for (var name in schema)
      if (opts.schema[name]) schema[name] = opts.schema[name]

    var answers = yield khaos.prompt(schema)

    yield khaos.write(dest, files, answers)
  }))(src, dest, fn)
}

/**
 * Read prompts metadata.
 *
 * @param {String} dir
 * @return {Object}
 */

function options (dir) {
  var file = join(dir, 'meta.json')
  var opts = exists(file)
    ? metadata.sync(file)
    : {}

  setDefault(opts, 'name', name)

  var author = getGitUser()
  if (author) {
    setDefault(opts, 'author', author)
  }

  return opts
}

/**
 * Set the default value for a schema key
 *
 * @param {Object} opts
 * @param {String} key
 * @param {String} val
 */

function setDefault (opts, key, val) {
  var schema = opts.schema || (opts.schema = {})
  if (!schema[key] || typeof schema[key] !== 'object') {
    schema[key] = {
      'type': 'string',
      'default': val
    }
  } else {
    schema[key]['default'] = val
  }
}
